from spacy.tokens import Span
from spacy.matcher import Matcher
from tqdm import tqdm
import matplotlib.pyplot as plt
import networkx as nx
import re
import pandas as pd
import bs4
import requests
import spacy
from spacy import displacy
import json
import os

nlp = spacy.load('en_core_web_sm')


pd.set_option('display.max_colwidth', 400)
# %matplotlib inline


def get_entities(sent):

    ent1 = ""
    ent2 = ""
    prv_tok_dep = ""    # dependency tag of previous token in the sentence
    prv_tok_text = ""   # previous token in the sentence

    prefix = ""
    modifier = ""
    subject1 = 0
    object2 = 0

    for tok in nlp(sent):
        # print(tok.text, "----------- ", tok.dep_, "----------", tok.tag_)
        if tok.dep_ != "punct":
            if tok.dep_ == "compound":
                prefix = tok.text
                if prv_tok_dep == "compound":
                    prefix = prv_tok_text + " " + tok.text

            if tok.dep_.endswith("mod") == True:
                modifier = tok.text

                if prv_tok_dep == "compound":
                    modifier = prv_tok_text + " " + tok.text
            if ((tok.dep_.find("subj") == True or tok.dep_.find("obj") == True) and (subject1 == 0) or ((prv_tok_dep == "amod" or prv_tok_dep == "compound") and tok.dep_ == "ROOT")):
                # print(tok.text, subject1, tok.dep_)
                subject1 = 1
                if prefix!="":
                    ent1 = modifier + " " + prefix + " " + tok.text
                else:
                    ent1 = modifier + " " + tok.text

                prefix = ""
                modifier = ""
                prv_tok_dep = ""
                prv_tok_text = ""

            elif tok.dep_.find("obj") == True:
                if prefix!="":
                    ent2 = modifier + " " + prefix + " " + tok.text
                else:
                    ent2 = modifier + " " + tok.text
            prv_tok_dep = tok.dep_
            prv_tok_text = tok.text
    return [ent1.lower().strip(), ent2.lower().strip()]


def get_relation(sent, entity):
    entityStr = entity[0]+" "+entity[1]
    entityStr = entityStr.split()

    doc = nlp(sent)

    # Matcher class object
    matcher = Matcher(nlp.vocab)

    # define the pattern
    pattern = [{'DEP': 'ROOT'},
               {'DEP': 'prep', 'OP': "?"},
               {'DEP': 'agent', 'OP': "?"},
               {'POS': 'ADJ', 'OP': "?"}
               ]

    matcher.add("matching_1", None, pattern)

    matches = matcher(doc)
#   print(matches)
    k = len(matches) - 1
    span = doc[matches[k][1]:matches[k][2]]
    data = span.text
    data = data.split()
#   print("data is ",data)
    final_data = ""
#   print("entity is ", entityStr)
    for word in data:
        if word not in entityStr:
            final_data = final_data+word+" "
    if(len(final_data) > 0):
        final_data = final_data[:-1]
    if(len(final_data) == 0):
        return span.text
    return(final_data.lower())


# newdata = [{"id": 1, "title": "html - Embed graphical editor to a web page - Stack Overflow", "question": " \r\n                                so it's   for Stack Overflow.\r\n                         Closed  . I am creating a web page and I need to add a component that allows a user who enters my web to graphically edit an 3d model in order to create custom designs using a GUI.\nPaint, add shapes, colors, images ... I have searched on google and I don't see anything, do you know if there is any framework that allows me this for either 3d or 2d models? For example: I want to add a GUI on my website similar to the orange square\n I would be grateful for anything to start at least.\nThank you. Want to improve this question? Update the question on-topic", "answers": [" To edit an image is much easier than a 3D model. You should use the canvas element to edit images. See  . You draw everything you want using javascript and save it as PNG, JPG or webhp. https://www.w3schools.com/graphics/canvas_intro.asp", " Search again, there is plenty of options around:  Your challenge is to try them all and then make it work the way you want. google.com/search?q=online+image+editor+github"], "url": "https://stackoverflow.com/questions/58763949/embed-graphical-editor-to-a-web-page"},
#            {"id": 2, "title": "python - Are receipts generated by google play API v2 and the latest version v3 compatible - Stack Overflow", "question": " Client subscribes to the service plan using in app purchases and the server receives the receipt to validate the same and store it back for verifying at the next subscription cycle.  According to the documentation mentioned here: I have updated the client version and also changed the API version numbers accordingly.  Code before:\ngoogle-api-python-client version 1.3.1 Code after: google-api-python-client version 1.7.11 I have a query if the receipt format generated before Dec 1 will remain compatible when we validate the same using version 3 of the API. https://android-developers.googleblog.com/2019/03/changes-to-google-play-developer-api.html", "answers": [], "url": "https://stackoverflow.com/questions/58763941/are-receipts-generated-by-google-play-api-v2-and-the-latest-version-v3-compatibl"},
#            {"id": 3, "title": "Flutter: keep data in textfield after setstate - Stack Overflow", "question": " start_workout.dart dynamic_widget.dart", "answers": [
#                " I solved this just by making your   update when the text changes in your text field. The main parts are the   and   methods as well as the   methods in the text fields in the dynamic widget. I also made sure to initialize the controllers with the values contained in the   when the dynamic widget is built. Basically, the dynamic widgets are being redrawn every time you call   from its parent. Since you never told the dynamic widgets to save anything, they are redrawn from scratch. This is still happening, except now we give them some initial information.  is a video of it working. SetModel updatePounds updateReps onChanged SetModel setState Here", " Use controller! Then retrieve it using  Obviously you could use an array of controller and then retrieve them"], "url": "https://stackoverflow.com/questions/58763942/flutter-keep-data-in-textfield-after-setstate"},
#            {"id": 4, "title": "Problem with the proxy using ZAP Docker Image GitLab - Stack Overflow", "question": " I'm trying to use ZAP in my GitLab repository. (link to the docker image for ZAP:  ) After running the specific CLI command, i get this error:  Has anyone already had the same problem or knows how I could solve it? Thank you all! https://github.com/zaproxy/zaproxy/wiki/Docker", "answers": [
#            ], "url": "https://stackoverflow.com/questions/58763946/problem-with-the-proxy-using-zap-docker-image-gitlab"},
#            {"id": 5, "title": "python - Setting a list item is converting it into a tuple - Stack Overflow", "question": " Firstly, I'm sure this is just something pythonic that I'm unaware of. However, I've been baffled for ages so I need some help! Now as far as I see this   give me  ...etc. However it is giving me  ...etc which is most confusing! (Note: I   this isn't the right way of doing this exercise in and of itself, there is madness in my method)  The original posting had the last line:   (no comma) which confused everyone, because essentially the code worked. Now that we see   the symptoms are clear. Update: v=['N','S', v=[('N',),('S',) v[i] = data[i] v[i] = data[i],", "answers": [
#                " I deleted as, try as I might I could not reproduce.  The reason I couldn't reproduce was there was a typo in the original in which   had a rogue comma. v[i]=data[i],"], "url": "https://stackoverflow.com/questions/58763948/setting-a-list-item-is-converting-it-into-a-tuple"},
#            ]

newdata=""
with open('sof20k.json') as f:
    newdata = json.load(f)


entityData = []
relations = []
for dataInput in tqdm(newdata):
    data = get_entities(dataInput["title"][:-14])
    entityData.append(data)
    relations.append(get_relation(dataInput["title"][:-14], data))

# print(entityData)
# print(relations)


per_word_knowledge_graph ={}

for ind in range(len(entityData)):
    for eachSub in entityData[ind][0].split():
        
        if eachSub not in per_word_knowledge_graph.keys():
            per_word_knowledge_graph[eachSub]=[]
        for eachObj in entityData[ind][1].split():
            if eachObj not in per_word_knowledge_graph.keys():
                per_word_knowledge_graph[eachObj]=[]

            if eachSub!=" " and eachObj!=" ":
                per_word_knowledge_graph[eachObj].append(eachSub)
                per_word_knowledge_graph[eachSub].append(eachObj)
    per_word_knowledge_graph[eachSub].append(relations[ind])
    per_word_knowledge_graph[eachObj].append(relations[ind])


print(per_word_knowledge_graph)
filePath=os.path.join('per_word_knowledge_graph.json')
with open(filePath, 'w+') as f:
        json.dump(per_word_knowledge_graph, f)


print("------------------------------------------------------")


graph_dict={}
for ind in range(len(entityData)):
    if entityData[ind][0] not in graph_dict.keys():
        graph_dict[entityData[ind][0]]=[]
    if entityData[ind][1] not in graph_dict.keys():
        graph_dict[entityData[ind][1]]=[]
    if (entityData[ind][0]!=" " and entityData[ind][1]!=" " and relations[ind]!=" "):
        graph_dict[entityData[ind][0]].append(relations[ind])
        graph_dict[entityData[ind][1]].append(relations[ind])
    elif (entityData[ind][0]!=" " and relations[ind]!=" "):
        graph_dict[entityData[ind][0]].append(relations[ind])
    elif (entityData[ind][1]!=" " and relations[ind]!=" "):
        graph_dict[entityData[ind][1]].append(relations[ind])
    if(entityData[ind][0]!=" " and entityData[ind][1]!=" "):
        graph_dict[entityData[ind][0]].append(entityData[ind][1])
        graph_dict[entityData[ind][1]].append(entityData[ind][0])

print(graph_dict)
filePath=os.path.join('knowledge_graph_data.json')
with open(filePath, 'w+') as f:
        json.dump(graph_dict, f)





# data="web scraping in python"
# output=get_entities(data)
# print("The entities are---\n",output)
# print("the relation is ",get_relation(data, output))

# # extract subject
# source = [i[0] for i in entityData]

# # extract object
# target = [i[1] for i in entityData]

# # print(source)
# # print(target)

# # code for generating pictorial graph, but I have coomented these codes

# kg_df = pd.DataFrame({'source': source, 'target': target, 'edge': relations})

# # print(kg_df)
# # create a directed-graph from a dataframe
# G = nx.from_pandas_edgelist(kg_df, "source", "target",
#                             edge_attr=True, create_using=nx.MultiDiGraph())

# plt.figure(figsize=(12, 12))

# pos = nx.spring_layout(G)
# nx.draw(G, with_labels=True, node_color='skyblue',
#         edge_cmap=plt.cm.Blues, pos=pos)
# plt.show()
